# Copyright (c) 2020, 2021 International Business Machines Corporation
# Prepared by: Geert Janssen <geert@us.ibm.com>

# Example of an codenet_aggregate.sh configuration file.
# It is expected that this file defines lists of problems, languages,
# statutes and min and max code sizes.
# COPY THIS FILE AND EDIT IT TO YOUR NEEDS.

# Set this to override default or -d option:
#DATA_DIR=""

# Other options could be overridden here as well:
#OUTPUT_DIR=                    # -o option
#QUIET=                         # -q option
#DRYRUN=                        # -n option
# How many samples to provide per selection.
# A selection is a problem/language/status combination.
# When not defined, it means all available.
#NUM_SAMPLES=                   # -s option
# How many samples to generate in total.
# When not defined, it means all available.
#NUM_OVERALL_SAMPLES=           # -t option

# Problems are selected by the SELECT_PROBLEM predicate.
# The arguments are:
# $1: a string problem id with pattern "p[0-9]{5}"
function SELECT_PROBLEM() {
    # Ex: select a single problem:
    #[ "$1" == "p00253" ] && return 0 || return 1
    # Ex: select all problems:
    #return 0
    # Ex: select a range of problems (string comparison!):
    # (p00001 through p00007, bounds inclusive)
    #[ ! "p00001" \> "$1" -a ! "$1" \> "p00007" ] && return 0 || return 1
    # Ex: select from a set of problems:
    for p in "p02532" "p00341" "p02000"; do
        if [ "$1" == "${p}" ]; then
            return 0;
        fi
    done
    return 1;
}

# List of languages (uncomment your selection):
LANGUAGES=(
#  "Ada"
#  "Awk"
#  "Bash"
#  "bc"
#  "Bf"
  "C"
#  "C#"
  "C++"
#  "Ceylon"
#  "Clojure"
#  "COBOL"
#  "Crystal"
#  "Cython"
#  "D"
#  "Dart"
#  "Dash"
#  "dc"
#  "Elixir"
#  "Erlang"
#  "F#"
#  "Forth"
#  "Fortran"
#  "Go"
#  "Haskell"
#  "Haxe"
#  "Java"
#  "JavaScript"
#  "Julia"
#  "Kotlin"
#  "Lisp"
#  "Lua"
#  "MoonScript"
#  "Nim"
#  "Objective-C"
#  "OCaml"
#  "Octave"
#  "Pascal"
#  "Perl"
#  "PHP"
#  "Prolog"
#  "Python"
#  "Racket"
#  "Ruby"
#  "Rust"
#  "Scala"
#  "Scheme"
#  "Sed"
#  "Standard ML"
#  "Swift"
#  "Text"
#  "TypeScript"
#  "Unlambda"
#  "Vim"
#  "Visual Basic"
#  "Zsh"
)

# List of statuses (uncomment your selection):
STATUSES=(
#    "Compile Error"
#    "Wrong Answer"
#    "Time Limit Exceeded"
#    "Memory Limit Exceeded"
    "Accepted"
#    "Judge Not Available"
#    "Output Limit Exceeded"
#    "Runtime Error"
#    "WA: Presentation Error"
)

# Select on code size (>= 0). Bounds are inclusive.
MIN_CODE_SIZE=0
MAX_CODE_SIZE=                  # undefined means unlimited

# This function is called for every selected submission source file.
# The current working directory is the output data directory (-o).
# The arguments are:
# $1: the fullpath name of the submission file
# $2: problem_id
# $3: language
# $4: status
#function ACTION() {
#    echo $1
#}
